@page "/heatingbar"
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.ConfigLib
@using BI_Core
@using BI_Dashboard_Webclient.ViewModels
@using Infrastructure


<MudContainer Class="mt-16 px-16" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h2">Heizungtypen nach Baujahren</MudText>
    <div style="@(_isInitDone ? "" : "display: none;")">
        <PlotlyChart style="height: 80vh; width: 80vw;" @ref="_chart"/>
    </div>
    @if (_isInitDone == false)
    {
        <div class="progress-info">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Style="padding-top: 20px;" Typo="Typo.h4">Rufe Daten ab...</MudText>
        </div>
    }
</MudContainer>


@code
{
    [Inject]
    public BarPlotViewModel Vm { get; set; }
    
    private PlotlyChart _chart;
    bool _isInitDone;

    readonly Config _config = new()
    {
        Responsive = true, 
        DisplayLogo = false, 
        DisplayModeBar = DisplayModeBarEnum.False, 
        Editable = false
    };

    readonly Layout _layout = new()
    {
        BarMode = BarModeEnum.Stack, 
        BarGap = 0,
        Height = 800
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Vm.Init();
            var (years, heatingTypes, heating) = Vm.ExtractData();

            for (int i = 0; i < heating.Count; i++)
            {
                var trace = new Bar
                {
                    X = years,
                    Y = heating[i],
                    Name = heatingTypes[i]
                };
                await _chart.AddTrace(trace);
            }

            _chart.Layout = _layout;
            _chart.Config = _config;
            await _chart.Update();
            _isInitDone = true;
            StateHasChanged();
        }
    }
}