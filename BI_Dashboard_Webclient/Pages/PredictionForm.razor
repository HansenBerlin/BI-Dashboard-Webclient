@page "/prediction"

@using BI_Core
@using BI_Dashboard_Webclient.Models
@using Infrastructure
@using BI_Core.Services

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h2">ML gestützte Preisvorhersage</MudText>
    <MudGrid Style="margin-top: 30px;">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Style="width: 360px; height: 100%; display: flex; flex-direction: column;">
                <MudForm Model="_address" @ref="@_addressForm">
                    <MudCardContent>
                        <MudTextField Label="Straße"
                                      @bind-Value="_address.Street"/>
                        <MudTextField Label="Hausnummer"
                                      @bind-Value="_address.StreetNumber"/>
                        <MudTextField Label="PLZ"
                                      @bind-Value="_address.PostalCode"
                                      MaxLength="5"/>
                        <MudTextField Label="Ort"
                                      Required="true"
                                      @bind-Value="_address.City"/>
                    </MudCardContent>
                </MudForm>
                <MudCardActions Style="width: 100%; height: 100%; padding: 16px; display: flex; flex-direction: column-reverse;">
                    <MudButton
                        Style="width: 100%;"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Class="ml-auto"
                        OnClick="@AddDataFromBookmark">
                        Daten einfügen
                    </MudButton>
                    <div style="width: 100%;">
                        <MudSelect T="int" 
                                   Style="width: 100%; margin-top: 40px; margin-bottom: 20px;"
                                   Label="Vorgemerktes Haus auswählen" 
                                   @bind-Value="@_houseId">
                            @foreach (int id in _houseIds)
                            {
                                <MudSelectItem Style="width: 100%;" Value="id">Haus @id</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                    <MudButton
                        Style="width: 100%;"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Class="ml-auto"
                        OnClick="@(async () => await Submit())">
                        Koordinaten abrufen
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Style="width: 360px; display: flex; flex-direction: column;">
                <MudForm Model="@_request">
                    <MudCardContent>
                        <MudNumericField Label="Anzahl Zimmer"
                                         @bind-Value="_request.NoRooms"
                                         Min="1"
                                         Max="10"/>
                        <MudNumericField Label="Wohnfläche"
                                         @bind-Value="_request.LivingSpace"
                                         Min="10"
                                         Max="250"/>
                        <MudNumericField Label="Baujahr"
                                         @bind-Value="_request.YearConstructed"
                                         Min="1880"
                                         Max=@DateTime.Now.Year />
                        <MudSelect T="int" @bind-Value="@_request.Condition" Label="Zustand" Text="@Condition.FirstTimeUse.ToString()">
                            @foreach (var val in Enum.GetValuesAsUnderlyingType(typeof(Condition)))
                            {
                                <MudSelectItem Value="@((int) val)">@((Condition) val)</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="int" @bind-Value="@_request.InteriorQual" Label="Innenausstattung" Text="@InteriorQuality.Normal.ToString()">
                            @foreach (var val in Enum.GetValuesAsUnderlyingType(typeof(InteriorQuality)))
                            {
                                <MudSelectItem Value="@((int) val)">@((InteriorQuality) val)</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="int" @bind-Value="@_request.TypeOfFlat" Label="Wohnungstyp" Text="@TypeOfFlat.Apartment.ToString()">
                            @foreach (var val in Enum.GetValuesAsUnderlyingType(typeof(TypeOfFlat)))
                            {
                                <MudSelectItem Value="@((int) val)">@((TypeOfFlat) val)</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="int" @bind-Value="@_request.HeatingType" Label="Heizungstyp" Text="@Heating.CentralHeating.ToString()">
                            @foreach (var val in Enum.GetValuesAsUnderlyingType(typeof(Heating)))
                            {
                                <MudSelectItem Value="@((int) val)">@((Heating) val)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardContent>
                </MudForm>
                <MudCardActions Style="padding: 16px;">
                    <MudButton
                        Style="width: 100%;"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Class="ml-auto"
                        OnClick="Predict">
                        PREDICT
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Style="width: 360px; height: 100%; display: flex; flex-direction: column;">
                <MudForm Model="_amortisation" @ref="@_amortisationForm" Style="height: 100%;">
                    <MudCardContent Style="height: 100%; flex-direction: column; display: flex;">
                        <MudNumericField T="double" 
                                         Format="F0" 
                                         Min="1" 
                                         Max="100000000" 
                                         Label="Kaufpreis (fix)"
                                         Step="1000"
                                         @bind-Value="_amortisation.PurchasePrice"/>
                        <MudNumericField T="double" 
                                         Format="F2" 
                                         Label="Kaufnebenkosten in %"
                                         Min="0.01"
                                         Step="0.01"
                                         Max="1"
                                         @bind-Value="_amortisation.AdditionalPurchaseCosts"/>
                        <MudNumericField T="double" 
                                         Format="F2" 
                                         Label="Instandhaltungskosten/Jahr in %"
                                         Min="0.005"
                                         Step="0.005"
                                         Max="10"
                                         @bind-Value="_amortisation.MaintenanceCosts"/>
                        <MudNumericField T="double" 
                                         Format="F0" 
                                         Label="Verwaltungskosten/Jahr"
                                         Min="0"
                                         Max="1000000"
                                         Step="100"
                                         @bind-Value="_amortisation.AdministrativeCosts"/>
                        <MudNumericField T="double" 
                                         Format="F0" 
                                         Min="1"
                                         Max="1000000"
                                         Step="50"
                                         Label="Kaltmiete/Monat"
                                         @bind-Value="_amortisation.BaseRentMonthlyIncome"/>
                        <MudNumericField T="double" 
                                         Format="F2" 
                                         Min="0.00"
                                         Max="1"
                                         Step="0.01"
                                         Label="Mieterhöhung/Jahr in %"
                                         @bind-Value="_amortisation.RentIncreasePerYear"/>
                        <MudButton
                            Style="width: 100%;"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            Class="ml-auto"
                            OnClick="() => { _amortisation.CalculateAmortisation(); }">
                            ausrechnen
                        </MudButton>
                    </MudCardContent>
                </MudForm>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4" Style="width: 360px; height: 100%; justify-content: center; display: grid;">
                <div class="dashboard-card">
                    <MudIcon Style="font-size: 5.5rem;" 
                             Icon="@Icons.Material.Filled.Money" 
                             Color="Color.Primary"/>
                    <div style="margin-left: 10px;">
                        <p style="font-size: 1rem; line-height: 1;">Voraussichtliche Kaltmiete</p>
                        @if (score > 0)
                        {
                            <div class="score-value">
                                <h3 style="line-height: 1.1;">@score €</h3>
                            </div>
                        }
                        else
                        {
                            <h3 style="line-height: 1.1;">-</h3>
                        }
                    </div>
                </div>
                <div class="dashboard-card">
                    <MudIcon Style="font-size: 5.5rem;" 
                             Icon="@Icons.Material.Filled.CalendarMonth" 
                             Color="Color.Primary"/>
                    <div style="margin-left: 10px;">
                        <p style="font-size: 1rem; line-height: 1;">Amortisationsdauer</p>
                        @if (_amortisation.Years > 0)
                        {
                            <div class="score-value">
                                <h3 style="line-height: 1.1;">@_amortisation.Years Jahre</h3>
                            </div>
                        }
                        else
                        {
                            <h3 style="line-height: 1.1;">-</h3>
                        }
                    </div>
                </div>
            </MudPaper> 
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    
	[Inject] 
	ISnackbar Snackbar { get; set; }
    
    [Inject]
    public OSMRequestService CoordinatesRequestService { get; set; }
    
    [Inject]
    public PredictionService Repository { get; set; }
    
    [Inject]
    public RealEstateBookmark RealEstateBookmark { get; set; }

    private int _houseId = 0;

    readonly PredictionRequestModel _request = new();
    readonly AddressModel _address = new();
    readonly AmortisationModel _amortisation = new();
    private MudForm _addressForm; 
    private MudForm _requestForm;
    private MudForm _amortisationForm;
    private int score;
    private List<int> _houseIds = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string url = "http://localhost:5000/predict";
            Repository.Init(url);
            _houseIds = RealEstateBookmark.GetallIds();
            _houseId = _houseIds.Count > 0 ? _houseIds[0] : _houseId;
            StateHasChanged();
        }
    }

    private async Task Predict()
    {
        score = 0;
        var response = await Repository.Post(_request);
        score = (int)response.Score;
        _amortisation.BaseRentMonthlyIncome = score;
    }

    private async Task Submit()
    {
        await _addressForm.Validate();
        if (_addressForm.IsValid)
        {
            var coordinates = await CoordinatesRequestService.Get(_address);
            _request.Lat = coordinates.Lat;
            _request.Lon = coordinates.Lon;
            Snackbar.Add($"Found Lat: {coordinates.Lat} and Lon: {coordinates.Lon}");
        }
    }
    
    private void AddDataFromBookmark()
    {
        var model = RealEstateBookmark.Get(_houseId);
        if (model.Id == 0)
        {
            return;
        }
        _amortisation.PurchasePrice = model.PurchasePrice;
        _request.Lat = model.Lat;
        _request.Lon = model.Lon;
        _request.LivingSpace = model.LivingSpace;
        _request.NoRooms = model.NoRooms;
        _request.YearConstructed = model.YearConstructed;
        Snackbar.Add("Daten hinzugefügt", Severity.Info);

    }
}