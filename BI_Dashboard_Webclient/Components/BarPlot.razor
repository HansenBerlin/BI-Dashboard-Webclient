@page "/plots"
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.ConfigLib
@using BI_Core
@using Infrastructure


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False" Style="padding-top: 20px; margin-top: 20px!important;">
    <div style="@(_isInitDone ? "" : "display: none;")">
        <PlotlyChart style="height: 80vh; width: 80vw;" Id="TestId" @ref="_chart"/>
    </div>
    @if (_isInitDone == false)
    {
        <div class="progress-info">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Style="padding-top: 20px;" Typo="Typo.h4">Rufe Daten ab...</MudText>
        </div>
    }
</MudContainer>


@code
{
    [Inject]
    public Repository<ImmoRentDataModelBase> Repository { get; set; }
    
    PlotlyChart _chart;

    readonly Config _config = new()
    {
        Responsive = true, 
        DisplayLogo = false, 
        DisplayModeBar = DisplayModeBarEnum.False, 
        Editable = false
    };

    readonly Layout _layout = new()
    {
        BarMode = BarModeEnum.Stack, 
        BarGap = 0,
        Height = 800
    };

    List<ITrace> _data = new();
    List<object> _years = new();
    List<List<object>> _heating = new();
    bool _isInitDone;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            string url = "https://localhost:6001/rentdata";
            Repository.Init(url);
            var rentData = await Repository.GetAll();
            var years = rentData
                .Select(x => x.YearConstructed)
                .Where(x => x > 1880)
                .Distinct()
                .ToList();
            var heatingTypes = rentData.Select(x => x.HeatingType).Distinct().ToList();
            
            List<List<double>> relativeVals = heatingTypes.Select(_ => new List<double>()).ToList();
            
            foreach (int year in years)
            {
                int countTotal = rentData.Count(x => x.YearConstructed == year);
                for (var i = 0; i < heatingTypes.Count; i++)
                {
                    string ht = heatingTypes[i];
                    int count = rentData.Count(x => x.HeatingType == ht && x.YearConstructed == year);
                    double relative = (double) count / countTotal;
                    relativeVals[i].Add(relative);
                }
            }

            _years = years.Cast<object>().ToList();
            _heating = relativeVals.Select(l => l.Cast<object>().ToList()).ToList();
            //_heating = relativeVals.Select(l => l.Cast<object>().ToList()).ToList();
            _chart.Layout = _layout;
            _chart.Config = _config;
            //_data = new List<ITrace>();
            try
            {
                //await _chart.Relayout();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            for (int i = 0; i < _heating.Count; i++)
            {
                var trace = new Bar
                {
                    X = _years,
                    Y = _heating[i],
                    Name = heatingTypes[i]
                };
                await _chart.AddTrace(trace);
            }

            await _chart.Update();
            //await _chart.AddTrace(_data[1]);
            _isInitDone = true;
            StateHasChanged();
        }
    }
}