@page "/"
@using System.Linq
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.GeoLib
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IWebHostEnvironment Environment



<PlotlyChart @ref="plotlyChart" Style="height: 90vh;" />

@code {
    PlotlyChart plotlyChart;
    
    [Inject]
    public CsvParser<RdbDataModel> Parser { get; set; }

    string token = "pk.eyJ1IjoiaGFuc2VuYXVzYmVybGluIiwiYSI6ImNsZzRjNm51eDBvM3gzbHFlbzd1YzFucnQifQ.jZmB_ZdTHVkSlVddks7XfQ";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = await Parser.ParseAsync();
            var zSeries = data.Select(x => (object)x.ConsumerInsolvencies).ToList();
            var locSeries = data.Select(x => (object)x.AgsKey).ToList();
            
            var path = Path.Combine(Environment.WebRootPath, "geofiles", "landkreisegermany.geojson");
            string jsonString = await File.ReadAllTextAsync(path);
            var jsonObject = JsonSerializer.Deserialize<object>(jsonString);
            
            plotlyChart.Data = new List<ITrace>
            {
                new ChoroplethMapBox()
                {
                    GeoJson = jsonObject,
                    Z = zSeries,
                    Locations = locSeries,
                    FeatureIdKey = "properties.AGS"
                }
            };

            plotlyChart.Layout = new Layout
            {
                Geo = new List<Geo>
                {
                    new() { Scope = ScopeEnum.Europe }
                },
                MapBox = new List<MapBox>()
                {
                    new ()
                    {
                        Style = "carto-positron", 
                        Center = new () { Lon = 10.4515m, Lat = 51.1657m },
                        Zoom = 5.5m
                    }
                }
            };

            plotlyChart.Config = new Config { MapboxAccessToken = token };
            await plotlyChart.Relayout();
            await plotlyChart.AddTrace(plotlyChart.Data[0]);
            StateHasChanged();
        }
    }

}