@page "/"
@using System.Linq
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.ColorAxisLib
@using Plotly.Blazor.LayoutLib.ColorAxisLib.ColorBarLib
@using Plotly.Blazor.LayoutLib.MapBoxLib
@using Plotly.Blazor.Traces.ScatterMapBoxLib
@using Center = Plotly.Blazor.LayoutLib.MapBoxLib.Center
@using JsonSerializer = System.Text.Json.JsonSerializer
@using Marker = Plotly.Blazor.Traces.ScatterMapBoxLib.Marker
@using ModeFlag = Plotly.Blazor.Traces.ScatterMapBoxLib.ModeFlag
@using Title = Plotly.Blazor.LayoutLib.ColorAxisLib.ColorBarLib.Title
@inject IWebHostEnvironment Environment



<PlotlyChart @ref="_plotlyChart" Style="height: 90vh;" />

@code {
    
    [Inject]
    public CsvParser<RdbDataModel> ParserRdb { get; set; }
    [Inject]
    public CsvParser<ImmoRentDataModel> ParserRent { get; set; }
    private const string Token = "pk.eyJ1IjoiaGFuc2VuYXVzYmVybGluIiwiYSI6ImNsZzRjNm51eDBvM3gzbHFlbzd1YzFucnQifQ.jZmB_ZdTHVkSlVddks7XfQ";
    private PlotlyChart _plotlyChart;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var choroplethOverlayData = await ParserRdb.ParseAsync();
            var scatterOverlayData = await ParserRent.ParseAsync();
            scatterOverlayData = scatterOverlayData.GetRange(0, 1000);
            var zSeries = choroplethOverlayData.Select(x => (object)x.ConsumerInsolvencies).ToList();
            var locSeries = choroplethOverlayData.Select(x => (object)x.AgsKey).ToList();
            
            var path = Path.Combine(Environment.WebRootPath, "geofiles", "landkreisegermany.geojson");
            string jsonString = await File.ReadAllTextAsync(path);
            var jsonObject = JsonSerializer.Deserialize<object>(jsonString);

            _plotlyChart.Config = new Config { MapboxAccessToken = Token };
            //_plotlyChart.Data = new List<ITrace>();
            
            var choromap =  new ChoroplethMapBox
            {
                GeoJson = jsonObject,
                Z = zSeries,
                Locations = locSeries,
                FeatureIdKey = "properties.AGS",
                ColorAxis = "coloraxis"
            };

            var scatterMap = new ScatterMapBox
            {
                Lat = scatterOverlayData.Select(x => (object)x.Lat).ToList(),
                Lon = scatterOverlayData.Select(x => (object)x.Lon).ToList(),
                Mode = ModeFlag.Markers, Marker = new Marker
                {
                    ColorArray = scatterOverlayData.Select(x => (object)x.BaseRent).ToList(),
                    SizeArray = scatterOverlayData.Select(x => (decimal)x.LivingSpace).ToList() as IList<decimal?>, 
                    ColorAxis = "coloraxis2"
                    
                }
            };
            
            _plotlyChart.Layout = new Layout
            {
                MapBox = new List<MapBox>
                {
                    new ()
                    {
                        Style = "carto-positron", 
                        Center = new Center { Lon = 10.4515m, Lat = 51.1657m },
                        Zoom = 5.5m
                    }
                },
                ColorAxis = new List<ColorAxis>
                {
                    new()
                    {
                        ColorScale = "Blues", 
                        ShowScale = true, 
                        ColorBar = new ColorBar
                        {
                            YAnchor = 0, Y = 1, X = -0.05m, Title = new Title
                            {
                                Text = "hello"
                            }, 
                            TickLabelPosition = TickLabelPositionEnum.OutsideLeft
                        }
                    },
                    new()
                    {
                        ColorScale = "Cividis",
                        ShowScale = true, 
                        ColorBar = new ColorBar
                        {
                            Title = new Title
                            {
                                Text = "hello"
                            }, 
                            TickLabelPosition = TickLabelPositionEnum.OutsideRight
                        }
                    }
                    
                }
            };

            await _plotlyChart.Relayout();
            await _plotlyChart.AddTrace(choromap);
            await _plotlyChart.AddTrace(scatterMap);
            StateHasChanged();
        }
    }

}