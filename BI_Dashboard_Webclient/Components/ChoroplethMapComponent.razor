@page "/"
@using Plotly.Blazor
@using System.Linq
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Http.Features
@using Newtonsoft.Json
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.GeoLib
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IWebHostEnvironment Environment



<PlotlyChart @ref="plotlyChart" Data="_data" Style="height: 800px; width: 100%;" >
    
</PlotlyChart>


@code {
    private ChoroplethMapBox _choropleth;
    PlotlyChart plotlyChart;
    List<ITrace> _data;
    Layout _layout;
    Config _config;
    

    string token = "pk.eyJ1IjoiaGFuc2VuYXVzYmVybGluIiwiYSI6ImNsZzRjNm51eDBvM3gzbHFlbzd1YzFucnQifQ.jZmB_ZdTHVkSlVddks7XfQ";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var path = Path.Combine(Environment.WebRootPath, "geofiles", "gemeindengermany.geojson");
            string jsonString = await File.ReadAllTextAsync(path);
            var jsonObject = JsonSerializer.Deserialize<object>(jsonString);
            var zSeries = new List<object> {0.1f, 0.2f, 0.4f};
            var locSeries = new List<object> {"01001000", "01002000", "01003000"};

            _choropleth = new ChoroplethMapBox()
            {
                GeoJson = jsonObject,
                Z = zSeries,
                Locations = locSeries,
                FeatureIdKey = "properties.ags"
            };
            
            _data = new List<ITrace>
            {
                _choropleth
            };
            
        
            _layout = new Layout()
            {
                Geo = new List<Geo>()
                {
                    new()
                    {
                        Scope = ScopeEnum.Europe
                    }
                },
                MapBox = new List<MapBox>()
                {
                    new ()
                    {
                        Style = "carto-darkmatter", 
                        AccessToken = token
                    }
                }
            };

            _config = new Config()
            {
                MapboxAccessToken = token
            };

            plotlyChart.Config = _config;
            plotlyChart.Layout = _layout;
            await plotlyChart.Relayout();
            await plotlyChart.AddTrace(_choropleth);
            StateHasChanged();

        }
    }

}